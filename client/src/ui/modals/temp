static void on_file_open(GtkWidget *widget, gpointer user_data) {
    (void)widget;
    (void)user_data;

    GtkWindow *dialog_window = GTK_WINDOW(gtk_window_new(GTK_WINDOW_TOPLEVEL));

    gtk_window_set_default_size(dialog_window, 600, 303);

    gtk_window_set_resizable(dialog_window, TRUE);

    int parent_width, parent_height;
    gtk_window_get_size(GTK_WINDOW(vendor.window), &parent_width, &parent_height);
    int parent_x, parent_y;
    gtk_window_get_position(GTK_WINDOW(vendor.window), &parent_x, &parent_y);

    gtk_window_move(dialog_window,
                    parent_x + (parent_width / 2) - 300,
                    parent_y + (parent_height / 2) - 150);

    GtkWidget *dialog = gtk_file_chooser_dialog_new("Open File",
                                                    dialog_window,
                                                    GTK_FILE_CHOOSER_ACTION_OPEN,
                                                    "_Cancel", GTK_RESPONSE_CANCEL,
                                                    "_Open", GTK_RESPONSE_ACCEPT,
                                                    NULL);

    gint res = gtk_dialog_run(GTK_DIALOG(dialog));

    if (res == GTK_RESPONSE_ACCEPT) {
        GtkFileChooser *chooser = GTK_FILE_CHOOSER(dialog);
        char *file_path = gtk_file_chooser_get_filename(chooser);

        if (file_path) {
            const char *valid_extensions[] = {"jpg", "jpeg", "png", NULL};
            const char *file_extension = g_strrstr(file_path, ".");
            gboolean is_valid_image = FALSE;

            for (int i = 0; valid_extensions[i] != NULL; i++) {
                if (file_extension && g_str_has_suffix(file_extension, valid_extensions[i])) {
                    is_valid_image = TRUE;
                    break;
                }
            }

            if (is_valid_image) {
                GDateTime *now = g_date_time_new_now_utc();
                gchar *timestamp = g_date_time_format(now, "%Y%m%d%H%M%S");
                g_date_time_unref(now);

                const char *basename = g_path_get_basename(file_path);
                gchar *new_filename = g_strdup_printf("%s_%s%s", timestamp, basename, file_extension);

                const char *dest_dir = "resources/images/user_uploads";
                gchar *destination_path = g_build_filename(dest_dir, new_filename, NULL);

                g_mkdir_with_parents(dest_dir, 0755);

                GFile *src_file = g_file_new_for_path(file_path);
                GFile *dst_file = g_file_new_for_path(destination_path);

                // Копируем файл
                if (g_file_test(file_path, G_FILE_TEST_EXISTS)) {
                    if (g_file_copy(src_file, dst_file, G_FILE_COPY_OVERWRITE, NULL, NULL, NULL, NULL)) {
                        g_print("File successfully copied to: %s\n", destination_path);
                    } else {
                        g_warning("Failed to copy file to: %s\n", destination_path);
                    }
                }

                g_object_unref(src_file);
                g_object_unref(dst_file);

                g_free(destination_path);
                g_free(new_filename);
            } else {
                g_warning("Selected file is not a valid image.\n");
            }

            g_free(file_path);
        } else {
            g_warning("No file selected.");
        }
    }

    gtk_widget_destroy(dialog);
    gtk_widget_destroy(GTK_WIDGET(dialog_window));
}